// Generated by CoffeeScript 1.6.3
(function() {
  var app,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = angular.module('logger');

  app.service('dataLoader', function($q, $http, loggerConstants) {
    return {
      cache: null,
      unescapeHTML: function(text) {
        return angular.element('<div>').html(text).text();
      },
      get: function(url) {
        return $http.get(url).then(function(data) {
          var line, _i, _len, _ref, _results;
          _ref = data.trim().split('\r\n');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            _results.push(line.split('\t'));
          }
          return _results;
        });
      },
      load: function() {
        var categories, colorNames, colors, name, parts,
          _this = this;
        if (this.cache) {
          return $q.when(this.cache);
        }
        colors = {};
        colorNames = {};
        parts = {};
        categories = {};
        return $q.all((function() {
          var _i, _len, _ref, _results;
          _ref = ['colors', 'codes', 'parts'];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            _results.push(this.get("/data/" + name + ".tsv"));
          }
          return _results;
        }).call(this)).then(function(_arg) {
          var category, categoryId, categoryName, codesData, color, colorId, colorName, colorsData, id, name, part, partsData, rrggbb, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
          colorsData = _arg[0], codesData = _arg[1], partsData = _arg[2];
          for (_i = 0, _len = colorsData.length; _i < _len; _i++) {
            _ref = colorsData[_i], colorId = _ref[0], colorName = _ref[1], rrggbb = _ref[2];
            colors[colorId] = colorNames[colorName] = {
              id: colorId,
              name: _this.unescapeHTML(colorName),
              rgb: '#' + rrggbb
            };
          }
          for (_j = 0, _len1 = codesData.length; _j < _len1; _j++) {
            _ref1 = codesData[_j], id = _ref1[0], colorName = _ref1[1];
            color = colorNames[colorName];
            if (!color) {
              continue;
            }
            part = parts[id] || (parts[id] = {
              id: id,
              colors: []
            });
            if (__indexOf.call(part.colors, color) < 0) {
              part.colors.push(color);
            }
          }
          for (_k = 0, _len2 = partsData.length; _k < _len2; _k++) {
            _ref2 = partsData[_k], categoryId = _ref2[0], categoryName = _ref2[1], id = _ref2[2], name = _ref2[3];
            part = parts[id];
            if (!part) {
              continue;
            }
            category = categories[categoryId] || (categories[categoryId] = {
              id: categoryId,
              name: _this.unescapeHTML(categoryName),
              parts: []
            });
            part.name = _this.unescapeHTML(name);
            part.categoryId = categoryId;
            category.parts.push(part);
          }
          return _this.cache = {
            categories: categories,
            parts: parts,
            colors: colors
          };
        });
      }
    };
  });

}).call(this);
