// Generated by CoffeeScript 1.6.1
(function() {
  var $, Color, ImageProcessor, Model, Palette, PaletteView, SuperArray, View, cancelEvent, main, uuid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = function(id) {
    return document.getElementById(id);
  };

  SuperArray = (function() {

    function SuperArray() {}

    SuperArray.prototype.minBy = function(func) {
      var d, min, res, solution, _i, _len, _ref;
      min = Infinity;
      solution = null;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        d = this[_i];
        res = func(d);
        if (min > res) {
          _ref = [res, d], min = _ref[0], solution = _ref[1];
        }
      }
      return solution;
    };

    SuperArray.prototype.maxBy = function(func) {
      return this.minBy(function(d) {
        return -func(d);
      });
    };

    SuperArray.prototype.min = function() {
      return this.minBy(function(d) {
        return d;
      });
    };

    SuperArray.prototype.max = function() {
      return this.minBy(function(d) {
        return -d;
      });
    };

    return SuperArray;

  })();

  uuid = (function() {
    var re, replacer;
    re = /[xy]/g;
    replacer = function(c) {
      var r;
      r = Math.random() * 16 | 0;
      return (c === 'x' ? r : r & 3 | 8).toString(16);
    };
    return function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(re, replacer).toUpperCase();
    };
  })();

  Model = (function() {

    function Model() {
      this._uuid = uuid();
    }

    Model.prototype.change = function() {
      return eve("" + this._uuid + ".change");
    };

    return Model;

  })();

  View = (function() {

    function View(model) {
      this.model = model;
      eve.on("" + this.model._uuid + ".change", this.render.bind(this));
    }

    View.prototype.render = function() {};

    return View;

  })();

  Color = (function() {

    function Color(r, g, b) {
      this.r = r != null ? r : 0;
      this.g = g != null ? g : 0;
      this.b = b != null ? b : 0;
    }

    Color.prototype.dist = function(color) {
      var db, dg, dr, _ref;
      _ref = [color.r - this.r, color.g - this.g, color.b - this.b], dr = _ref[0], dg = _ref[1], db = _ref[2];
      return Math.sqrt(dr * dr + dg * dg + db * db);
    };

    Color.prototype.luma = function() {
      return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;
    };

    Color.prototype.toArray = function() {
      return [this.r, this.g, this.b];
    };

    Color.prototype.toString = function() {
      return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
    };

    return Color;

  })();

  ImageProcessor = (function() {

    ImageProcessor.prototype.width = 48;

    ImageProcessor.prototype.unitWidth = 5;

    ImageProcessor.prototype.unitHeight = 2;

    ImageProcessor.prototype.dither = false;

    ImageProcessor.prototype.vivid = false;

    ImageProcessor.prototype.brightness = 0;

    ImageProcessor.prototype.contrast = 0;

    ImageProcessor.prototype.colors = [];

    ImageProcessor.prototype.colorReduced = null;

    ImageProcessor.prototype.shader = {
      vertex: "attribute vec2 a_position;\n\nvoid main(){\n  gl_Position = vec4(a_position, 0.0, 1.0);\n}",
      noop: "precision mediump float;\nuniform sampler2D u_source;\nuniform vec2 u_sourceSize;\n\nvoid main(){\n  gl_FragColor = texture2D(u_source, gl_FragCoord.xy / u_sourceSize);\n}",
      reduceColorDithered: "  precision mediump float;\n  uniform sampler2D u_source;\n  uniform vec2 u_sourceSize;\n  uniform sampler2D u_colors;\n\n  uniform bool u_vivid;\n  uniform float u_brightness;\n  uniform float u_contrast;\n\n  const int COMBINATIONS = 128;\n  \n  void getColors(in int idx, out vec4 c1, out vec4 c2){\n    float x = (0.5 + float(idx)) / float(COMBINATIONS);\n    c1 = texture2D(u_colors, vec2(x, 0.0));\n    c2 = texture2D(u_colors, vec2(x, 2.0));\n  }\n  float dist(vec4 srcColor, vec4 color){\n    float d = distance(srcColor, color);\n    if(u_vivid) d /= (distance(vec3(0.5), color.rgb) + 0.4);\n    return d;\n  }\n  float ditherIndex(){\n    float p = floor(mod(gl_FragCoord.x, 4.0));\n    float q = floor(mod(p - gl_FragCoord.y, 4.0));\n    return (\n      8.0 * mod(q, 2.0) +\n      4.0 * mod(p, 2.0) +\n      2.0 * floor(q / 2.0) +\n      floor(p / 2.0) +\n      0.5\n    ) / 16.0;\n  }\n  float calculateBestRatio(vec4 srcColor, vec4 c1, vec4 c2){\n    vec4 dif = c2 - c1;\n    return floor(\n      0.5 + dot(dif, srcColor - c1) / dot(dif, dif) * 16.0\n    ) / 16.0;\n  }\n  vec4 dither(vec4 srcColor){\n    vec4 c1, c2, canditate;\n    float ratio;\n    float d, minDist = 9.9;\n    float index = ditherIndex();\n    \n    for(int i = 0; i < COMBINATIONS; i++){\n      getColors(i, c1, c2);\n      ratio = calculateBestRatio(srcColor, c1, c2);\n      d =\n        dist(srcColor, mix(c1, c2, clamp(ratio, 1.0, 0.0))) +\n        distance(c1, c2) * 0.1;\n      if(minDist > d){\n        minDist = d;\n        if(index > ratio){\n          canditate = c1;\n        } else {\n          canditate = c2;\n        }\n      }\n    }\n    return canditate;\n  }\n    \n  float filterComponent(float color){\n    color = pow(color, u_brightness);\n    if(color < 0.5){\n      return 0.5 * pow(2.0 * color, 1.0 / u_contrast);\n    } else {\n      return 0.5 * pow(2.0 * color - 1.0, u_contrast) + 0.5;\n    }\n  }\n  vec4 getSourceColor(){\n    vec4 col = texture2D(u_source, gl_FragCoord.xy / u_sourceSize);\n    return vec4(\n      filterComponent(col.r), filterComponent(col.g),\n      filterComponent(col.b), 1.0\n    );\n  }\n  void main(){\n    gl_FragColor = dither(getSourceColor());\n  }",
      reduceColor: "precision mediump float;\nuniform sampler2D u_source;\nuniform vec2 u_sourceSize;\nuniform sampler2D u_colors;\n\nuniform bool u_vivid;\nuniform float u_brightness;\nuniform float u_contrast;\n\nconst int COLORLEN = 32;\n\nvec4 getColor(int idx){\n  float x = (0.5 + float(idx)) / float(COLORLEN);\n  return texture2D(u_colors, vec2(x, 0.5));\n}\nfloat dist(vec4 srcColor, vec4 color){\n  float d = distance(srcColor, color);\n  if(u_vivid) d /= (distance(vec3(0.5), color.rgb) + 0.4);\n  return d;\n}\nvec4 nearest(vec4 srcColor){\n  vec4 col, minCol;\n  float d, mind = 9.9;\n  \n  for(int i = 0; i < COLORLEN; i++){\n    col = getColor(i);\n    d = dist(srcColor, col);\n    if(mind > d){\n      minCol = col;\n      mind = d;\n    }\n  }\n  return minCol;\n}\n  \nfloat filterComponent(float color){\n  color = pow(color, u_brightness);\n  if(color < 0.5){\n    return 0.5 * pow(2.0 * color, 1.0 / u_contrast);\n  } else {\n    return 0.5 * pow(2.0 * color - 1.0, u_contrast) + 0.5;\n  }\n}\nvec4 getSourceColor(){\n  vec4 col = texture2D(u_source, gl_FragCoord.xy / u_sourceSize);\n  return vec4(\n    filterComponent(col.r), filterComponent(col.g),\n    filterComponent(col.b), 1.0\n  );\n}\nvoid main(){\n  gl_FragColor = nearest(getSourceColor());\n}",
      thumbnail: "precision mediump float;\nuniform sampler2D u_source;\nuniform vec2 u_sourceSize;\nuniform vec2 u_unitSize;\n\nvoid main(){\n  vec2 pos = floor(gl_FragCoord.xy / u_unitSize) + vec2(0.5);\n  gl_FragColor = texture2D(u_source, pos / u_sourceSize);\n}",
      blueprint: "precision mediump float;\nuniform sampler2D u_source;\nuniform vec2 u_sourceSize;\nuniform vec2 u_unitSize;\nuniform float u_scale;\n\nfloat luma(vec4 color){\n  return dot(vec3(0.3, 0.59, 0.11), color.rgb);\n}\nvoid main(){\n  vec2 pos_f = (gl_FragCoord.xy - vec2(0.5)) / u_unitSize / u_scale;\n  vec2 pos = floor(pos_f) + vec2(0.5);\n  vec4 color = texture2D(u_source, pos / u_sourceSize);\n  if(pos.x - pos_f.x == 0.5 || pos.y - pos_f.y == 0.5){\n    if(luma(color) < 0.5){\n      color += vec4(0.4);\n    } else {\n      color -= vec4(0.4, 0.4, 0.4, 0.0);\n    }\n  }\n  gl_FragColor = color;\n}"
    };

    function ImageProcessor() {
      var colorCanv;
      this._img = document.createElement('img');
      this._ctx = document.createElement('canvas').getContext('2d');
      colorCanv = document.createElement('canvas');
      this._colorCtx = colorCanv.getContext('2d');
      this._gl = new MicroGL({
        antialias: false
      });
    }

    ImageProcessor.prototype._scale = function() {
      var canv;
      canv = this._ctx.canvas;
      canv.width = this.width;
      canv.height = this._canvasHeight = this.width * this.unitWidth / this.unitHeight * this._img.height / this._img.width | 0;
      return this._ctx.drawImage(this._img, 0, 0, canv.width, canv.height);
    };

    ImageProcessor.prototype._renderGL = function(width, height, fshader, source, target, variables) {
      if (variables == null) {
        variables = {};
      }
      this._gl.init(null, width, height).program(this.shader.vertex, fshader).bindVars({
        a_position: [-1, -1, -1, 1, 1, -1, 1, 1],
        u_source: source,
        u_sourceSize: [source.width, source.height],
        u_unitSize: [this.unitWidth, this.unitHeight]
      }).bindVars(variables);
      if (target) {
        return this._gl.drawFrame(target);
      } else {
        return this._gl.draw();
      }
    };

    ImageProcessor.prototype._createCombination = function(max) {
      var c1, c2, colorNames, colors, i, ii, jj, _i, _j, _ref;
      if (max == null) {
        max = 128;
      }
      colors = [];
      colorNames = Object.keys(this.colors);
      i = 0;
      for (ii = _i = 0, _ref = colorNames.length; 0 <= _ref ? _i < _ref : _i > _ref; ii = 0 <= _ref ? ++_i : --_i) {
        c1 = this.colors[colorNames[ii]];
        if (!c1.use) {
          continue;
        }
        for (jj = _j = 0; 0 <= ii ? _j < ii : _j > ii; jj = 0 <= ii ? ++_j : --_j) {
          c2 = this.colors[colorNames[jj]];
          if (!c2.use) {
            continue;
          }
          colors.push([c1, c2]);
        }
      }
      colors.sort(function(_arg, _arg1) {
        var a1, a2, b1, b2;
        a1 = _arg[0], a2 = _arg[1];
        b1 = _arg1[0], b2 = _arg1[1];
        return a1.color.dist(a2.color) - b1.color.dist(b2.color);
      });
      return colors.slice(0, max);
    };

    ImageProcessor.prototype._reduceColor = function() {
      var c1, c2, canv, colorCanv, colorData, height, i, name, shader, width, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      colorCanv = this._colorCtx.canvas;
      if (this.dither) {
        shader = this.shader.reduceColorDithered;
        colorCanv.width = 128;
        colorCanv.height = 2;
        colorData = this._colorCtx.createImageData(128, 2);
        _ref = this._createCombination(128);
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          _ref1 = _ref[i], c1 = _ref1[0], c2 = _ref1[1];
          colorData.data.set([c1.color.r, c1.color.g, c1.color.b, 255], i << 2);
          colorData.data.set([c2.color.r, c2.color.g, c2.color.b, 255], (i + 128) << 2);
        }
      } else {
        shader = this.shader.reduceColor;
        colorCanv.width = 32;
        colorCanv.height = 1;
        colorData = this._colorCtx.createImageData(32, 1);
        _ref2 = Object.keys(this.colors);
        for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
          name = _ref2[i];
          c1 = this.colors[name];
          if (!c1.use) {
            continue;
          }
          colorData.data.set([c1.color.r, c1.color.g, c1.color.b, 255], i << 2);
        }
      }
      this._colorCtx.putImageData(colorData, 0, 0);
      canv = this._ctx.canvas;
      width = canv.width, height = canv.height;
      this.colorReduced = this._gl.frame(width, height);
      this.colorReduced.color.width = width;
      this.colorReduced.color.height = height;
      return this._renderGL(this.width, this._canvasHeight, shader, canv, this.colorReduced, {
        u_colors: colorCanv,
        u_vivid: this.vivid,
        u_brightness: Math.exp(-this.brightness),
        u_contrast: Math.exp(-this.contrast)
      });
    };

    ImageProcessor.prototype.render = function(source, callback) {
      var _this = this;
      if (source) {
        this._img.onload = function() {
          _this._scale();
          _this._reduceColor();
          return typeof callback === "function" ? callback() : void 0;
        };
        return this._img.src = source;
      } else {
        this._scale();
        this._reduceColor();
        return typeof callback === "function" ? callback() : void 0;
      }
    };

    ImageProcessor.prototype.getThumbnail = function() {
      var canv;
      canv = this._ctx.canvas;
      return this._renderGL(this.width * this.unitWidth, this._canvasHeight * this.unitHeight, this.shader.thumbnail, this.colorReduced.color).gl.canvas;
    };

    ImageProcessor.prototype.getBlueprint = function() {
      var canv;
      canv = this._gl.gl.canvas;
      return this._renderGL(this.width * this.unitWidth * 4, this._canvasHeight * this.unitHeight * 4, this.shader.blueprint, this.colorReduced.color, null, {
        u_scale: 4
      }).gl.canvas;
    };

    return ImageProcessor;

  })();

  Palette = (function(_super) {

    __extends(Palette, _super);

    function Palette() {
      return Palette.__super__.constructor.apply(this, arguments);
    }

    Palette.prototype.colors = {
      'Black': {
        color: new Color(33, 33, 33),
        use: true
      },
      'Dark Gray': {
        color: new Color(107, 90, 90),
        use: true
      },
      'Light Gray': {
        color: new Color(156, 156, 156),
        use: true
      },
      'Very Light Gray': {
        color: new Color(232, 232, 232),
        use: true,
        check: true
      },
      'White': {
        color: new Color(255, 255, 255),
        use: true
      },
      'Dark Bluish Gray': {
        color: new Color(89, 93, 96)
      },
      'Light Bluish Gray': {
        color: new Color(175, 181, 199)
      },
      'Blue': {
        color: new Color(0, 87, 166)
      },
      'Red': {
        color: new Color(179, 0, 6)
      },
      'Yellow': {
        color: new Color(247, 209, 23)
      },
      'Green': {
        color: new Color(0, 100, 46)
      },
      'Tan': {
        color: new Color(222, 198, 156)
      },
      'Reddish Brown': {
        color: new Color(137, 53, 29)
      },
      'Dark Blue': {
        color: new Color(20, 48, 68)
      },
      'Bright Pink': {
        color: new Color(243, 154, 194)
      },
      'Brown': {
        color: new Color(83, 33, 21)
      },
      'Dark Purple': {
        color: new Color(95, 38, 131)
      },
      'Dark Red': {
        color: new Color(106, 14, 21)
      },
      'Dark Tan': {
        color: new Color(144, 116, 80)
      },
      'Dark Turquoise': {
        color: new Color(0, 138, 128)
      },
      'Lime': {
        color: new Color(166, 202, 85)
      },
      'Maersk Blue': {
        color: new Color(107, 173, 214)
      },
      'Medium Blue': {
        color: new Color(97, 175, 255)
      },
      'Medium Lavender': {
        color: new Color(181, 165, 213)
      },
      'Medium Orange': {
        color: new Color(255, 165, 49)
      },
      'Orange': {
        color: new Color(255, 126, 20)
      },
      'Pink': {
        color: new Color(255, 199, 225)
      },
      'Purple': {
        color: new Color(165, 73, 156)
      },
      'Sand Blue': {
        color: new Color(90, 113, 132)
      },
      'Sand Green': {
        color: new Color(118, 162, 144)
      }
    };

    Palette.prototype.use = function(name) {
      this.colors[name].use = true;
      return this.change();
    };

    Palette.prototype.unuse = function(name) {
      var color;
      color = this.colors[name];
      color.use = color.checked = false;
      return this.change();
    };

    Palette.prototype.check = function(name) {
      this.colors[name].checked = true;
      return this.change();
    };

    Palette.prototype.uncheck = function(name) {
      this.colors[name].checked = false;
      return this.change();
    };

    Palette.prototype.resetAmount = function() {
      var color, _i, _len, _ref, _results;
      _ref = this.colors;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        color = _ref[_i];
        _results.push(color.amount = 0);
      }
      return _results;
    };

    Palette.prototype.setAmount = function(name, value) {
      this.colors[name].amount = value;
      return this.change();
    };

    return Palette;

  })(Model);

  PaletteView = (function(_super) {

    __extends(PaletteView, _super);

    function PaletteView(model, elem) {
      var color, colors, frag, li, name, _i, _len, _ref,
        _this = this;
      this.elem = elem;
      PaletteView.__super__.constructor.call(this, model);
      colors = this.model.colors;
      frag = document.createDocumentFragment();
      _ref = Object.keys(colors);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        color = colors[name];
        li = document.createElement('li');
        li.style.backgroundColor = color.color.toString();
        li.dataset.name = name;
        frag.appendChild(li);
      }
      this.elem.appendChild(frag);
      this.elem.addEventListener('click', function(e) {
        name = e.target.dataset.name;
        if (!name) {
          return;
        }
        if (colors[name].checked) {
          return _this.model.unuse(name);
        } else if (colors[name].use) {
          return _this.model.check(name);
        } else {
          return _this.model.use(name);
        }
      }, false);
      this.render();
    }

    PaletteView.prototype.render = function() {
      var classes, color, li, name, _i, _len, _ref, _results;
      _ref = this.elem.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        li = _ref[_i];
        name = li.dataset.name;
        color = this.model.colors[name];
        classes = [];
        if (color.use) {
          classes.push('color-use');
        }
        if (color.checked) {
          classes.push('color-checked');
        }
        _results.push(li.className = classes.join(' '));
      }
      return _results;
    };

    return PaletteView;

  })(View);

  cancelEvent = function(e) {
    e.stopPropagation();
    return e.preventDefault();
  };

  main = function() {
    var ctx, palette, proc, render, rendered;
    palette = new Palette();
    new PaletteView(palette, $('palette'));
    ctx = $('canv').getContext('2d');
    proc = new ImageProcessor();
    proc.colors = palette.colors;
    rendered = false;
    render = function(file) {
      var url;
      if (file) {
        if (!~file.type.indexOf('image')) {
          return;
        }
        url = window.URL.createObjectURL(file);
      } else if (!rendered) {
        return;
      }
      return proc.render(url, function() {
        var thumb;
        thumb = proc.getThumbnail();
        ctx.canvas.width = thumb.width;
        ctx.canvas.height = thumb.height;
        ctx.drawImage(thumb, 0, 0);
        return rendered = true;
      });
    };
    document.body.addEventListener('dragenter', cancelEvent, false);
    document.body.addEventListener('dragover', cancelEvent, false);
    document.body.addEventListener('drop', function(e) {
      var _ref, _ref1;
      cancelEvent(e);
      return render((_ref = e.dataTransfer) != null ? (_ref1 = _ref.files) != null ? _ref1[0] : void 0 : void 0);
    }, false);
    $('form').addEventListener('change', function(e) {
      var target;
      target = e.target;
      if (target.tagName.toUpperCase() === 'INPUT') {
        proc[target.name] = target.type === 'checkbox' ? target.checked : +target.value;
        return render();
      }
    }, false);
    $('render-button').addEventListener('click', function() {
      if (rendered) {
        return window.open(proc.getBlueprint().toDataURL('image/png'));
      }
    }, false);
    return eve.on("" + palette._uuid + ".change", render);
  };

  document.addEventListener('DOMContentLoaded', main, false);

}).call(this);
