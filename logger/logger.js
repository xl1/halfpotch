// Generated by CoffeeScript 1.6.3
(function() {
  var Controller, Logger, app,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Controller = (function() {
    function Controller() {}

    Controller.getController = function() {
      var required,
        _this = this;
      required = angular.injector().annotate(this);
      required.unshift('$scope');
      required.push(function() {
        var $scope, args, key, value, _ref;
        $scope = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        _ref = new _this();
        for (key in _ref) {
          value = _ref[key];
          if (typeof value === 'function') {
            $scope[key] = value.bind($scope);
          } else {
            $scope[key] = value;
          }
        }
        return _this.apply($scope, args);
      });
      return required;
    };

    return Controller;

  })();

  app = angular.module('logger', []);

  app.directive('contenteditable', function() {
    return {
      require: 'ngModel',
      link: function(scope, elem, attrs, model) {
        elem.bind('blur', function() {
          return scope.$apply(function() {
            return model.$setViewValue(elem.html());
          });
        });
        return model.$render = function() {
          return elem.html(this.$viewValue);
        };
      }
    };
  });

  app.directive('onEnter', function() {
    return function(scope, elem, attrs) {
      return elem.bind('keydown', function(e) {
        if (e.keyCode === 13) {
          return scope.$apply(attrs.onEnter);
        }
      });
    };
  });

  app.directive('inputDate', function(dateFilter) {
    return {
      require: 'ngModel',
      link: function(scope, elem, attrs, model) {
        return model.$render = function() {
          return elem.val(dateFilter(this.$viewValue, 'yyyy-MM-dd'));
        };
      }
    };
  });

  Logger = (function(_super) {
    __extends(Logger, _super);

    function Logger() {
      this.user = {
        name: 'Anonymous',
        isLoggedIn: false
      };
      this.newLabelText = '';
      this.newLotsText = '';
      this.selectedOrder = null;
      this._debug();
    }

    Logger.prototype._debug = function() {
      return this.orders = [
        {
          title: 'BrickLink Order #1234567',
          labels: ['Label1'],
          date: '2013-07-27',
          comment: 'これはコメントです',
          lots: [
            {
              color: {
                id: 11,
                name: 'Black',
                rgb: 'black'
              },
              part: {
                id: 3004,
                name: 'Brick 1 x 2'
              },
              condition: 'New',
              priceEach: 'EUR 0.0501',
              amount: 100,
              price: 'EUR 5.0100'
            }, {
              color: {
                id: 5,
                name: 'Red',
                rgb: '#b30006'
              },
              part: {
                id: 3003,
                name: 'Brick 2 x 2'
              },
              condition: 'New',
              priceEach: 'US $0.03',
              amount: 200,
              price: 'US $6.00'
            }
          ]
        }, {
          title: 'BrickLink Order #1111111',
          labels: [],
          date: '2012-12-24',
          comment: 'コメント',
          lots: [
            {
              color: {
                name: ''
              },
              part: {
                name: '#2259 Ninjago Skull Motorbike'
              },
              condition: 'New',
              priceEach: '\\4,500',
              price: '\\4,500'
            }
          ]
        }, {
          title: 'BrickLink Order #1000000',
          labels: ['Label1', 'Label2'],
          date: '2012-05-10',
          comment: 'これもコメントです',
          lots: []
        }
      ];
    };

    Logger.prototype.select = function(order) {
      return this.selectedOrder = order;
    };

    Logger.prototype.addLabel = function() {
      var _ref;
      if ((_ref = this.selectedOrder) != null) {
        _ref.labels.push(this.newLabelText);
      }
      return this.newLabelText = '';
    };

    Logger.prototype.deleteLabel = function(label) {
      var idx, order;
      if (order = this.selectedOrder) {
        idx = order.labels.indexOf(label);
        if (idx >= 0) {
          return order.labels.splice(idx, 1);
        }
      }
    };

    Logger.prototype.getLabelStyle = function(label) {
      var b, g, i, r, s, t, x, _i, _len;
      x = 0xC0FFEE;
      for (_i = 0, _len = label.length; _i < _len; _i++) {
        s = label[_i];
        i = s.charCodeAt(0);
        t = x ^ (x << 11);
        x = (i << 3) ^ (i << 13) ^ t ^ (t << 7);
      }
      r = (x >>> 16) & 255;
      g = (x >>> 8) & 255;
      b = x & 255;
      return {
        backgroundColor: "rgb(" + r + ", " + g + ", " + b + ")",
        color: r + g + b < 0x180 ? 'white' : 'black'
      };
    };

    Logger.prototype.addLots = function() {
      var line, lines, lots, order;
      if (order = this.selectedOrder) {
        lines = this.newLotsText.split(/[\r\n]+/);
        lots = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            line = lines[_i];
            if (line) {
              _results.push(this.parseLotText(line));
            }
          }
          return _results;
        }).call(this);
        order.lots = order.lots.concat(lots);
      }
      return this.newLotsText = '';
    };

    Logger.prototype.deleteLot = function(lot) {
      var idx, order;
      if (order = this.selectedOrder) {
        idx = order.lots.indexOf(lot);
        if (idx >= 0) {
          return order.lots.splice(idx, 1);
        }
      }
    };

    return Logger;

  })(Controller);

  app.controller('logger', Logger.getController());

}).call(this);
