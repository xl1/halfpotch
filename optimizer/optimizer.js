// Generated by CoffeeScript 1.6.0
(function() {
  var $, Assoc, CartSelectView, Color, ColorSelectView, DataLoader, DataProcessor, ELSE, FormView, IF, ItemStoreMatrix, Model, PartImageView, ProgressButton, ResultView, Retention, Router, Searcher, SelectModel, SelectView, Solver, StoreDataLoader, SuperArray, View, constants, escapeHTML, uuid, xhrget,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = function(id) {
    return document.getElementById(id);
  };

  escapeHTML = (function() {
    var re, replacer;
    re = /[&<>'"]/g;
    replacer = function(x) {
      return '&#' + x.charCodeAt(0) + ';';
    };
    return function(text) {
      return text.replace(re, replacer);
    };
  })();

  SuperArray = (function(_super) {

    __extends(SuperArray, _super);

    function SuperArray(ary) {
      if (ary == null) {
        ary = [];
      }
      Array.prototype.push.apply(this, ary);
    }

    SuperArray.prototype.minBy = function(func) {
      var d, min, res, solution, _i, _len, _ref;
      min = Infinity;
      solution = null;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        d = this[_i];
        res = func(d);
        if (min > res) {
          _ref = [res, d], min = _ref[0], solution = _ref[1];
        }
      }
      return solution;
    };

    SuperArray.prototype.maxBy = function(func) {
      return this.minBy(function(d) {
        return -func(d);
      });
    };

    SuperArray.prototype.min = function() {
      return Math.min.apply(Math, this);
    };

    SuperArray.prototype.max = function() {
      return Math.max.apply(Math, this);
    };

    SuperArray.prototype.combinations = function(len) {
      var a, i, last, res, _i, _j, _len, _len1, _ref;
      if (!len) {
        return [[]];
      }
      res = [];
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        a = this[i];
        _ref = SuperArray.prototype.combinations.call(this.slice(i + 1), len - 1);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          last = _ref[_j];
          res.push([a].concat(last));
        }
      }
      return res;
    };

    return SuperArray;

  })(Array);

  uuid = (function() {
    var re, replacer;
    re = /[xy]/g;
    replacer = function(c) {
      var r;
      r = Math.random() * 16 | 0;
      return (c === 'x' ? r : r & 3 | 8).toString(16);
    };
    return function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(re, replacer).toUpperCase();
    };
  })();

  Model = (function() {

    function Model() {
      this._uuid = uuid();
    }

    Model.prototype.change = function() {
      var arg, name;
      name = arguments[0], arg = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (name == null) {
        name = 'change';
      }
      return eve.apply(null, ["" + this._uuid + "." + name, null].concat(__slice.call(arg)));
    };

    Model.prototype.listen = function(name, func) {
      if (name == null) {
        name = 'change';
      }
      if (arguments.length === 1) {
        func = name;
        name = 'change';
      }
      return eve.on("" + this._uuid + "." + name, func.bind(this));
    };

    return Model;

  })();

  View = (function() {

    function View(model) {
      var _this = this;
      this.model = model;
      model.listen(function() {
        var arg;
        arg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.render.apply(_this, arg);
      });
    }

    View.prototype.render = function() {};

    return View;

  })();

  Color = (function() {

    function Color(r, g, b) {
      this.r = r != null ? r : 0;
      this.g = g != null ? g : 0;
      this.b = b != null ? b : 0;
    }

    Color.prototype.dist = function(color) {
      var db, dg, dr, _ref;
      _ref = [color.r - this.r, color.g - this.g, color.b - this.b], dr = _ref[0], dg = _ref[1], db = _ref[2];
      return Math.sqrt(dr * dr + dg * dg + db * db);
    };

    Color.prototype.luma = function() {
      return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;
    };

    Color.prototype.toArray = function() {
      return [this.r, this.g, this.b];
    };

    Color.prototype.toString = function() {
      return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
    };

    return Color;

  })();

  Assoc = (function(_super) {

    __extends(Assoc, _super);

    function Assoc(map) {
      this.map = map != null ? map : {};
      Assoc.__super__.constructor.apply(this, arguments);
    }

    Assoc.prototype.keys = function() {
      return Object.keys(this.map);
    };

    Assoc.prototype.get = function(name) {
      return this.map[name];
    };

    Assoc.prototype.set = function(name, value) {
      this.map[name] = value;
      return this.change('change', name, value);
    };

    return Assoc;

  })(Model);

  FormView = (function(_super) {

    __extends(FormView, _super);

    function FormView(model, elem) {
      var input, _i, _len, _ref,
        _this = this;
      this.elem = elem;
      FormView.__super__.constructor.apply(this, arguments);
      _ref = HTMLElement.prototype.querySelectorAll.call(elem, '[name]');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        this._setValue(input);
      }
      HTMLElement.prototype.addEventListener.call(elem, 'change', function(e) {
        return _this._setValue(e.target);
      }, false);
    }

    FormView.prototype._setValue = function(input) {
      var name, value, _ref;
      name = input.name, value = input.value;
      switch ((_ref = input.getAttribute('type')) != null ? _ref.toLowerCase() : void 0) {
        case 'number':
        case 'range':
          return this.model.set(name, +value || 0);
        case 'date':
        case 'datetime-local':
          return this.model.set(name, new Date(value));
        case 'checkbox':
          return this.model.set(name, input.checked);
        case 'radio':
          if (input.checked) {
            return this.model.set(name, value);
          }
          break;
        default:
          return this.model.set(name, value);
      }
    };

    FormView.prototype.render = function() {
      var input, inputs, name, value, _i, _j, _len, _len1, _ref;
      _ref = this.model.keys();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        inputs = HTMLFormElement.prototype.querySelectorAll.call(this.elem, "[name=" + name + "]");
        if (!inputs.length) {
          continue;
        }
        value = this.model.get(name);
        switch (inputs[0].type) {
          case 'checkbox':
            inputs[0].checked = value;
            break;
          case 'radio':
            value = value.toString();
            for (_j = 0, _len1 = inputs.length; _j < _len1; _j++) {
              input = inputs[_j];
              if (!(input.value === value)) {
                continue;
              }
              input.checked = true;
              break;
            }
            break;
          default:
            inputs[0].value = value;
        }
      }
    };

    return FormView;

  })(View);

  constants = {
    mosaic: {
      vshader: "attribute vec2 a_position;\nvarying vec2 v_texCoord;\n\nvoid main(){\n  v_texCoord = a_position / 2.0 + vec2(0.5);\n  gl_Position = vec4(a_position, 0.0, 1.0);\n}",
      fshader: {
        noop: "precision mediump float;\nuniform sampler2D u_source;\nvarying vec2 v_texCoord;\n\nvoid main(){\n  gl_FragColor = texture2D(u_source, v_texCoord);\n}",
        reduceColorDithered: "  precision mediump float;\n  uniform sampler2D u_source;\n  uniform sampler2D u_colors;\n\n  uniform bool u_vivid;\n  uniform float u_brightness;\n  uniform float u_contrast;\n\n  varying vec2 v_texCoord;\n\n  const int COMBINATIONS = 128;\n  const float GAMMA = 2.2;\n\n  vec4 gamma(vec4 color){\n    return pow(color, vec4(GAMMA));\n  }\n  vec4 ungamma(vec4 color){\n    return pow(color, vec4(1.0 / GAMMA));\n  }\n  \n  void getColors(in int idx, out vec4 c1, out vec4 c2){\n    float x = (0.5 + float(idx)) / float(COMBINATIONS);\n    c1 = gamma(texture2D(u_colors, vec2(x, 0.0)));\n    c2 = gamma(texture2D(u_colors, vec2(x, 2.0)));\n  }\n  float dist(vec4 srcColor, vec4 color){\n    float d = distance(srcColor, color);\n    if(u_vivid) d /= (distance(vec3(0.5), color.rgb) + 0.4);\n    return d;\n  }\n  float ditherIndex(){\n    float p = floor(mod(gl_FragCoord.x, 4.0));\n    float q = floor(mod(p - gl_FragCoord.y, 4.0));\n    return (\n      8.0 * mod(q, 2.0) +\n      4.0 * mod(p, 2.0) +\n      2.0 * floor(q / 2.0) +\n      floor(p / 2.0) +\n      0.5\n    ) / 16.0;\n  }\n  float calculateBestRatio(vec4 srcColor, vec4 c1, vec4 c2){\n    vec4 dif = c2 - c1;\n    return floor(\n      0.5 + dot(dif, srcColor - c1) / dot(dif, dif) * 16.0\n    ) / 16.0;\n  }\n  vec4 dither(vec4 srcColor){\n    vec4 c1, c2, canditate;\n    float ratio;\n    float d, minDist = 9.9;\n    float index = ditherIndex();\n    \n    for(int i = 0; i < COMBINATIONS; i++){\n      getColors(i, c1, c2);\n      ratio = calculateBestRatio(srcColor, c1, c2);\n      d =\n        dist(srcColor, mix(c1, c2, clamp(ratio, 0.0, 1.0))) +\n        distance(c1, c2) * 0.2;\n      if(minDist > d){\n        minDist = d;\n        if(index > ratio){\n          canditate = c1;\n        } else {\n          canditate = c2;\n        }\n      }\n    }\n    return canditate;\n  }\n    \n  float filterComponent(float color){\n    color = pow(color, exp(-u_brightness));\n    if(color < 0.5){\n      return 0.5 * pow(2.0 * color, exp(u_contrast));\n    } else {\n      return 0.5 * pow(2.0 * color - 1.0, exp(-u_contrast)) + 0.5;\n    }\n  }\n  vec4 getSourceColor(){\n    vec4 col = texture2D(u_source, v_texCoord);\n    return gamma(vec4(\n      filterComponent(col.r), filterComponent(col.g),\n      filterComponent(col.b), 1.0\n    ));\n  }\n  void main(){\n    gl_FragColor = ungamma(dither(getSourceColor()));\n  }",
        reduceColor: "precision mediump float;\nuniform sampler2D u_source;\nuniform sampler2D u_colors;\n\nuniform bool u_vivid;\nuniform float u_brightness;\nuniform float u_contrast;\n\nvarying vec2 v_texCoord;\n\nconst int COLORLEN = 32;\nconst float GAMMA = 2.2;\n\nvec4 gamma(vec4 color){\n  return pow(color, vec4(GAMMA));\n}\nvec4 ungamma(vec4 color){\n  return pow(color, vec4(1.0 / GAMMA));\n}\n\nvec4 getColor(int idx){\n  float x = (0.5 + float(idx)) / float(COLORLEN);\n  return gamma(texture2D(u_colors, vec2(x, 0.5)));\n}\nfloat dist(vec4 srcColor, vec4 color){\n  float d = distance(srcColor, color);\n  if(u_vivid) d /= (distance(vec3(0.5), color.rgb) + 0.4);\n  return d;\n}\nvec4 nearest(vec4 srcColor){\n  vec4 col, minCol;\n  float d, mind = 9.9;\n  \n  for(int i = 0; i < COLORLEN; i++){\n    col = getColor(i);\n    d = dist(srcColor, col);\n    if(mind > d){\n      minCol = col;\n      mind = d;\n    }\n  }\n  return minCol;\n}\n  \nfloat filterComponent(float color){\n  color = pow(color, exp(-u_brightness));\n  if(color < 0.5){\n    return 0.5 * pow(2.0 * color, exp(u_contrast));\n  } else {\n    return 0.5 * pow(2.0 * color - 1.0, exp(-u_contrast)) + 0.5;\n  }\n}\nvec4 getSourceColor(){\n  vec4 col = texture2D(u_source, v_texCoord);\n  return gamma(vec4(\n    filterComponent(col.r), filterComponent(col.g),\n    filterComponent(col.b), 1.0\n  ));\n}\nvoid main(){\n  gl_FragColor = ungamma(nearest(getSourceColor()));\n}",
        blueprint: "precision mediump float;\nuniform sampler2D u_source;\nuniform vec2 u_unitSize;\nuniform vec2 u_domainSize;\nuniform float u_scale;\nuniform sampler2D u_colors;\n\nvarying vec2 v_texCoord;\n\nconst int COLORLEN = 32;\n\nbool checked(vec4 color){\n  float x;\n  for(int i = 0; i < COLORLEN; i++){\n    x = (0.5 + float(i)) / float(COLORLEN);\n    if(color == texture2D(u_colors, vec2(x, 0.5))) return true;\n  }\n  return false;\n}\nfloat luma(vec4 color){\n  return dot(vec3(0.3, 0.59, 0.11), color.rgb);\n}\nvec4 borderColor(vec4 color, float degree){\n  if(luma(color) < 0.5) return color + vec4(degree);\n  return color - vec4(vec3(degree), 0.0);\n}\nvoid main(){\n  vec2 pos = (gl_FragCoord.xy - vec2(0.5)) / u_scale;\n  vec2 unitCoord = mod(pos, u_unitSize);\n  vec2 domainCoord = mod(pos, u_unitSize * u_domainSize);\n  vec4 color = texture2D(u_source, v_texCoord);\n  \n  if(any(equal(domainCoord, vec2(0.0)))){\n    gl_FragColor = borderColor(color, 1.0);\n  } else if(unitCoord.x == unitCoord.y && checked(color) ||\n      any(equal(unitCoord, vec2(0.0)))){\n    gl_FragColor = borderColor(color, 0.3);\n  } else {\n    gl_FragColor = color;\n  }\n}"
      },
      colors: (function() {
        var b, checked, cls, g, id, name, r, use, _i, _len, _ref, _results;
        cls = [[11, 'Black', 33, 33, 33, true], [10, 'Dark Gray', 107, 90, 90, true], [9, 'Light Gray', 156, 156, 156, true], [49, 'Very Light Gray', 232, 232, 232, true, true], [1, 'White', 255, 255, 255, true], [85, 'Dark Bluish Gray', 89, 93, 96], [86, 'Light Bluish Gray', 175, 181, 199], [7, 'Blue', 0, 87, 166], [5, 'Red', 179, 0, 6], [3, 'Yellow', 247, 209, 23], [6, 'Green', 0, 100, 46], [2, 'Tan', 222, 198, 156], [88, 'Reddish Brown', 137, 53, 29], [63, 'Dark Blue', 20, 48, 68], [104, 'Bright Pink', 243, 154, 194], [8, 'Brown', 83, 33, 21], [89, 'Dark Purple', 95, 38, 131], [59, 'Dark Red', 106, 14, 21], [69, 'Dark Tan', 144, 116, 80], [39, 'Dark Turquoise', 0, 138, 128], [34, 'Lime', 166, 202, 85], [72, 'Maersk Blue', 107, 173, 214], [42, 'Medium Blue', 97, 175, 255], [157, 'Medium Lavender', 181, 165, 213], [31, 'Medium Orange', 255, 165, 49], [4, 'Orange', 255, 126, 20], [23, 'Pink', 255, 199, 225], [24, 'Purple', 165, 73, 156], [55, 'Sand Blue', 90, 113, 132], [48, 'Sand Green', 118, 162, 144]];
        _results = [];
        for (_i = 0, _len = cls.length; _i < _len; _i++) {
          _ref = cls[_i], id = _ref[0], name = _ref[1], r = _ref[2], g = _ref[3], b = _ref[4], use = _ref[5], checked = _ref[6];
          _results.push({
            id: id,
            name: name,
            color: new Color(r, g, b),
            use: use,
            checked: checked
          });
        }
        return _results;
      })(),
      option: {
        width: 48,
        height: 120,
        mode: 'stack-plate',
        unitSize: [5, 2],
        domainSize: [4, 6],
        dither: false,
        vivid: false,
        brightness: 0,
        contrast: 0,
        scale: 4
      }
    },
    optimizer: {
      appurl: '/optimizer/app'
    }
  };

  Retention = (function() {
    var ELSE, IF, NOT, UNLESS, WHEN;

    Retention.IF = IF = function(ret) {
      return function(success, fail) {
        if (ret.resolved) {
          if (typeof success === "function") {
            success();
          }
        } else if (ret.rejected) {
          if (typeof fail === "function") {
            fail();
          }
        } else {
          success && ret.successCallbacks.push(success);
          fail && ret.failCallbacks.push(fail);
        }
        return ret;
      };
    };

    Retention.UNLESS = UNLESS = function(ret) {
      return function(fail, success) {
        return IF(ret)(success, fail);
      };
    };

    Retention.ELSE = ELSE = function(x) {
      return x;
    };

    Retention.NOT = NOT = function(ret) {
      var r;
      r = new Retention();
      IF(ret)(function() {
        return r.reject(ret.result);
      });
      UNLESS(ret)(function() {
        return r.resolve(ret.error);
      });
      return r;
    };

    Retention.WHEN = WHEN = function(ret) {
      return function(callback) {
        return IF(ret)(callback, callback);
      };
    };

    Retention.prototype.result = null;

    Retention.prototype.error = null;

    Retention.prototype.resolved = false;

    Retention.prototype.rejected = false;

    function Retention() {
      this.successCallbacks = [];
      this.failCallbacks = [];
    }

    Retention.prototype.resolve = function(result) {
      var f, _i, _len, _ref;
      if (this.resolved || this.rejected) {
        return;
      }
      this.resolved = true;
      this.result = result;
      _ref = this.successCallbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        f();
      }
    };

    Retention.prototype.reject = function(error) {
      var f, _i, _len, _ref;
      if (this.resolved || this.rejected) {
        return;
      }
      this.rejected = true;
      this.error = error;
      _ref = this.failCallbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        f();
      }
    };

    Retention.prototype.AND = function(ret) {
      var r,
        _this = this;
      r = new Retention();
      IF(this)(function() {
        return IF(ret)(function() {
          return r.resolve();
        });
      });
      IF(ret)(function() {
        return IF(_this)(function() {
          return r.resolve();
        });
      });
      UNLESS(this)(function() {
        return r.reject();
      });
      UNLESS(ret)(function() {
        return r.reject();
      });
      return r;
    };

    Retention.prototype.DAND = function(ret) {
      var r,
        _this = this;
      r = new Retention();
      IF(this)(function() {
        return IF(ret)(function() {
          return r.resolve();
        });
      });
      IF(ret)(function() {
        return IF(_this)(function() {
          return r.resolve();
        });
      });
      UNLESS(this)(function() {
        return WHEN(ret)(function() {
          return r.reject();
        });
      });
      UNLESS(ret)(function() {
        return WHEN(_this)(function() {
          return r.reject();
        });
      });
      return r;
    };

    Retention.prototype.OR = function(ret) {
      var r,
        _this = this;
      r = new Retention();
      IF(this)(function() {
        return r.resolve();
      });
      IF(ret)(function() {
        return r.resolve();
      });
      UNLESS(this)(function() {
        return UNLESS(ret)(function() {
          return r.reject();
        });
      });
      UNLESS(ret)(function() {
        return UNLESS(_this)(function() {
          return r.reject();
        });
      });
      return r;
    };

    Retention.prototype.DOR = function(ret) {
      var r,
        _this = this;
      r = new Retention();
      IF(this)(function() {
        return WHEN(ret)(function() {
          return r.resolve();
        });
      });
      IF(ret)(function() {
        return WHEN(_this)(function() {
          return r.resolve();
        });
      });
      UNLESS(this)(function() {
        return UNLESS(ret)(function() {
          return r.reject();
        });
      });
      UNLESS(ret)(function() {
        return UNLESS(_this)(function() {
          return r.reject();
        });
      });
      return r;
    };

    return Retention;

  })();

  IF = Retention.IF, ELSE = Retention.ELSE;

  xhrget = function(url, param) {
    var k, r, xhr;
    if (param) {
      url += '?' + ((function() {
        var _i, _len, _ref, _results;
        _ref = Object.keys(param);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          _results.push("" + k + "=" + param[k]);
        }
        return _results;
      })()).join('&');
    }
    r = new Retention();
    xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onload = function() {
      if (xhr.status === 200) {
        return r.resolve(xhr.responseText);
      } else {
        return r.reject(xhr.statusText);
      }
    };
    xhr.onerror = function() {
      return r.reject();
    };
    xhr.send();
    return r;
  };

  DataLoader = (function() {

    function DataLoader() {}

    DataLoader.prototype.load = function(callback, errorCallback) {
      var baseurl, categories, codesData, colorNames, colors, colorsData, parts, partsData;
      colors = {};
      colorNames = {};
      parts = {};
      categories = {};
      baseurl = constants.optimizer.appurl + '/getpartsdata';
      colorsData = this.get(baseurl + '?num=3');
      codesData = this.get(baseurl + '?num=5');
      partsData = this.get(baseurl + '?num=0');
      return IF(colorsData.AND(codesData.AND(partsData)))(function() {
        var category, categoryId, categoryName, color, colorId, colorName, id, name, part, rrggbb, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        _ref = colorsData.result;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], colorId = _ref1[0], colorName = _ref1[1], rrggbb = _ref1[2];
          colors[colorId] = colorNames[colorName] = {
            id: colorId,
            name: colorName,
            rgb: '#' + rrggbb
          };
        }
        _ref2 = codesData.result;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          _ref3 = _ref2[_j], id = _ref3[0], colorName = _ref3[1];
          part = parts[id] || (parts[id] = {
            id: id,
            colors: []
          });
          color = colorNames[colorName];
          if (__indexOf.call(part.colors, color) < 0) {
            part.colors.push(color);
          }
        }
        _ref4 = partsData.result;
        for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
          _ref5 = _ref4[_k], categoryId = _ref5[0], categoryName = _ref5[1], id = _ref5[2], name = _ref5[3];
          part = parts[id];
          if (!part) {
            continue;
          }
          category = categories[categoryId] || (categories[categoryId] = {
            id: categoryId,
            name: categoryName,
            parts: []
          });
          part.name = name;
          part.categoryId = categoryId;
          category.parts.push(part);
        }
        return callback({
          categories: categories,
          parts: parts,
          colors: colors
        });
      }, ELSE(function() {
        return typeof errorCallback === "function" ? errorCallback() : void 0;
      }));
    };

    DataLoader.prototype.get = function(url) {
      var data, r;
      r = new Retention();
      data = xhrget(url);
      IF(data)(function() {
        var line;
        return r.resolve((function() {
          var _i, _len, _ref, _results;
          _ref = data.result.split('\n');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            _results.push(line.split('\t'));
          }
          return _results;
        })());
      }, ELSE(function() {
        return r.reject();
      }));
      return r;
    };

    return DataLoader;

  })();

  StoreDataLoader = (function() {

    function StoreDataLoader() {}

    StoreDataLoader.prototype.load = function(callback, errorCallback, params) {
      var baseurl, data, param;
      baseurl = constants.optimizer.appurl + '/getstoredata';
      data = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = params.length; _i < _len; _i++) {
          param = params[_i];
          _results.push(xhrget(baseurl, param));
        }
        return _results;
      })();
      return IF(data.reduce(function(pre, cur) {
        return pre.AND(cur);
      }))(function() {
        var d, result;
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            d = data[_i];
            _results.push(JSON.parse(d.result));
          }
          return _results;
        })();
        return callback(result);
      }, ELSE(function() {
        return errorCallback();
      }));
    };

    return StoreDataLoader;

  })();

  Solver = (function() {
    /*
      items = [item]
      item = { id, part, color, amount, stores }
      stores = [store]
      store = { id, name, items }
      matrix = (item, store) -> { price }
    */

    var calcStores, jointAsSet, totalPrice;

    function Solver() {}

    jointAsSet = function(a1, a2) {
      var item, res, _i, _len;
      res = [].concat(a1);
      for (_i = 0, _len = a2.length; _i < _len; _i++) {
        item = a2[_i];
        if (__indexOf.call(a1, item) < 0) {
          res.push(item);
        }
      }
      return res;
    };

    calcStores = function(items, stores, storeNum) {
      var comb, idx, restItems, restStores, result, store, threshold, _i, _j, _len, _len1, _ref;
      if (items.length === 0) {
        return [[]];
      }
      if (storeNum === 0) {
        return [];
      }
      result = [];
      threshold = items.length / storeNum;
      for (idx = _i = 0, _len = stores.length; _i < _len; idx = ++_i) {
        store = stores[idx];
        if (store.items.length < threshold) {
          return result;
        }
        restItems = items.filter(function(item) {
          return __indexOf.call(store.items, item) < 0;
        });
        restStores = stores.slice(idx);
        _ref = calcStores(restItems, restStores, storeNum - 1);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          comb = _ref[_j];
          result.push([store].concat(comb));
        }
      }
      return result;
    };

    totalPrice = function(items, stores, matrix) {
      var i, item, res, store, _i, _len;
      res = 0;
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        store = stores[i];
        res += matrix.get(item, store).price * item.amount;
      }
      return res;
    };

    Solver.prototype.solve = function(items, stores, matrix) {
      var buyableItems, item, largest, minStoreNum, solutions, storeList, storeLists, _i, _len;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (item.stores.length === 0) {
          return [];
        }
      }
      stores = new SuperArray(stores.sort(function(a, b) {
        return b.items.length - a.items.length;
      }));
      buyableItems = stores[0].items;
      minStoreNum = 1;
      while (buyableItems.length < items.length) {
        largest = stores.maxBy(function(store) {
          return store.items.filter(function(item) {
            return __indexOf.call(buyableItems, item) < 0;
          }).length;
        });
        buyableItems = jointAsSet(buyableItems, largest.items);
        minStoreNum++;
      }
      storeLists = calcStores(items, stores, minStoreNum);
      solutions = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = storeLists.length; _j < _len1; _j++) {
          storeList = storeLists[_j];
          _results.push((function() {
            var _k, _len2, _results1;
            _results1 = [];
            for (_k = 0, _len2 = items.length; _k < _len2; _k++) {
              item = items[_k];
              _results1.push(new SuperArray(storeList).minBy(function(store) {
                var _ref;
                return ((_ref = matrix.get(item, store)) != null ? _ref.price : void 0) || Infinity;
              }));
            }
            return _results1;
          })());
        }
        return _results;
      })();
      return solutions.sort(function(a, b) {
        return totalPrice(items, a, matrix) - totalPrice(items, b, matrix);
      });
    };

    return Solver;

  })();

  ItemStoreMatrix = (function() {

    function ItemStoreMatrix() {
      this.map = {};
    }

    ItemStoreMatrix.prototype.set = function(item, store, value) {
      var row, _base, _name;
      row = (_base = this.map)[_name = item.id] || (_base[_name] = {});
      return row[store.id] = value;
    };

    ItemStoreMatrix.prototype.get = function(item, store) {
      var _ref;
      return (_ref = this.map[item.id]) != null ? _ref[store.id] : void 0;
    };

    return ItemStoreMatrix;

  })();

  SelectModel = (function(_super) {

    __extends(SelectModel, _super);

    function SelectModel(type) {
      this.type = type;
      SelectModel.__super__.constructor.apply(this, arguments);
      this.item = null;
      this.options = [];
    }

    SelectModel.prototype.reset = function(source) {
      var id, ids, _i, _len;
      this.options = [];
      ids = Object.keys(source).sort(function(a, b) {
        return source[a].name.localeCompare(source[b].name);
      });
      for (_i = 0, _len = ids.length; _i < _len; _i++) {
        id = ids[_i];
        this.add(source[id], false);
      }
      return this.change();
    };

    SelectModel.prototype.add = function(item, change) {
      if (change == null) {
        change = true;
      }
      this.options.push(item);
      if (change) {
        return this.change('add', item);
      }
    };

    SelectModel.prototype.remove = function() {
      var idx, item;
      item = this.item;
      this.item = null;
      idx = this.options.indexOf(item);
      this.options.splice(idx, 1);
      this.change();
      return item;
    };

    SelectModel.prototype.setItem = function(id) {
      var option, _i, _len, _ref;
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.id === id) {
          this.item = option;
          this.change('select', option);
          return;
        }
      }
    };

    return SelectModel;

  })(Model);

  DataProcessor = (function(_super) {

    __extends(DataProcessor, _super);

    function DataProcessor() {
      DataProcessor.__super__.constructor.apply(this, arguments);
      this.items = [];
      this.stores = [];
      this.matrix = new ItemStoreMatrix();
      this._loader = new StoreDataLoader();
      this._solver = new Solver();
    }

    DataProcessor.prototype.reset = function() {
      this.items = [];
      return this.change('reset');
    };

    DataProcessor.prototype.process = function(items) {
      var item, params,
        _this = this;
      this.items = items;
      params = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _results.push({
            part: item.part.id,
            color: item.color.id,
            amount: item.amount
          });
        }
        return _results;
      })();
      this._loader.load(function(data) {
        _this.makeMatrix(data);
        _this.result = _this._solver.solve(_this.items, _this.stores, _this.matrix);
        return _this.change();
      }, function() {
        return _this.change('error');
      }, params);
      return this.change('start');
    };

    DataProcessor.prototype.makeMatrix = function(storeData) {
      var idx, item, key, s, sData, store, storeMap, _i, _j, _len, _len1, _name;
      storeMap = {};
      for (idx = _i = 0, _len = storeData.length; _i < _len; idx = ++_i) {
        sData = storeData[idx];
        item = this.items[idx];
        item.stores = [];
        for (_j = 0, _len1 = sData.length; _j < _len1; _j++) {
          s = sData[_j];
          store = storeMap[_name = s.id] || (storeMap[_name] = {
            id: s.id,
            name: s.name,
            items: []
          });
          store.items.push(item);
          item.stores.push(store);
          this.matrix.set(item, store, {
            price: s.price,
            url: s.url
          });
        }
      }
      return this.stores = (function() {
        var _k, _len2, _ref, _results;
        _ref = Object.keys(storeMap);
        _results = [];
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          key = _ref[_k];
          _results.push(storeMap[key]);
        }
        return _results;
      })();
    };

    return DataProcessor;

  })(Model);

  Router = (function() {

    function Router(select) {
      var _this = this;
      this.select = select;
      select.listen('add', function() {
        var query;
        query = _this.dump(select.options);
        return window.history.replaceState(query, null, '?o=' + query);
      });
    }

    Router.prototype.setData = function(data) {
      var item, items, query, _i, _len, _ref;
      this.data = data;
      query = (_ref = /[?&]o=([\w,|]*)/.exec(location.search)) != null ? _ref[1] : void 0;
      items = this.load(query);
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        this.select.add(item, false);
      }
      return this.select.change();
    };

    Router.prototype.dump = function(items) {
      var amount, color, part;
      return ((function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          _ref = items[_i], part = _ref.part, color = _ref.color, amount = _ref.amount;
          _results.push("" + part.id + "," + color.id + "," + amount);
        }
        return _results;
      })()).join('|');
    };

    Router.prototype.load = function(str) {
      var amount, color, colorId, id, part, result, s, _i, _len, _ref, _ref1;
      if (!str) {
        return [];
      }
      result = [];
      _ref = str.split('|');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _ref1 = s.split(','), id = _ref1[0], colorId = _ref1[1], amount = _ref1[2];
        part = this.data.parts[id];
        color = this.data.colors[colorId];
        if (part && color) {
          amount = amount > 0 ? amount | 0 : 1;
          result.push({
            id: uuid(),
            part: part,
            color: color,
            amount: amount
          });
        }
      }
      return result;
    };

    return Router;

  })();

  Searcher = (function() {

    function Searcher() {
      this.options = [];
      this.data = [];
    }

    Searcher.prototype.setData = function(source) {
      var key;
      return this.data = (function() {
        var _i, _len, _ref, _results;
        _ref = Object.keys(source);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push(source[key]);
        }
        return _results;
      })();
    };

    Searcher.prototype.tokenize = function(query) {
      return query.toLowerCase().split(/[,\s]+/).filter(function(str) {
        return str.length >= 2;
      });
    };

    Searcher.prototype.convertToken = function(token) {
      return token.replace(/([\/\.\d]+)(x)([\/\.\d]*)(x?)([\/\.\d]*)/, function() {
        var arg;
        arg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return arg.slice(1, 6).join(' ').trim();
      }).replace(/\+/g, ' ');
    };

    Searcher.prototype.match = function(text, tokens) {
      var t, _i, _len;
      if ((!text) || (tokens.length === 0)) {
        return;
      }
      text = text.toLowerCase();
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        t = tokens[_i];
        if (text.indexOf(t) === -1) {
          return false;
        }
      }
      return true;
    };

    Searcher.prototype.search = function(query) {
      var item, options, t, tokens, _i, _len, _ref;
      tokens = (function() {
        var _i, _len, _ref, _results;
        _ref = this.tokenize(query);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(this.convertToken(t));
        }
        return _results;
      }).call(this);
      options = [];
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (!(this.match(item.name, tokens))) {
          continue;
        }
        options.push(item);
        if (options.length > 100) {
          break;
        }
      }
      return this.options = options;
    };

    return Searcher;

  })();

  SelectView = (function(_super) {

    __extends(SelectView, _super);

    function SelectView(model, elem) {
      this.elem = elem;
      SelectView.__super__.constructor.apply(this, arguments);
      model.listen('add', this.add.bind(this));
    }

    SelectView.prototype._createLi = function(item) {
      var id, li, type;
      type = escapeHTML(this.model.type);
      id = escapeHTML(item.id);
      li = document.createElement('li');
      li.insertAdjacentHTML('beforeend', "<input type=\"radio\" id=\"" + (type + id) + "\" name=\"" + type + "\" value=\"" + id + "\">\n<label for=\"" + (type + id) + "\">" + (escapeHTML(item.name)) + "</label>");
      return li;
    };

    SelectView.prototype.add = function(option) {
      return this.elem.appendChild(this._createLi(option));
    };

    SelectView.prototype.render = function() {
      var frag, option, _i, _len, _ref;
      this.elem.innerHTML = '';
      frag = document.createDocumentFragment();
      _ref = this.model.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        frag.appendChild(this._createLi(option));
      }
      return this.elem.appendChild(frag);
    };

    return SelectView;

  })(View);

  ColorSelectView = (function(_super) {

    __extends(ColorSelectView, _super);

    function ColorSelectView() {
      return ColorSelectView.__super__.constructor.apply(this, arguments);
    }

    ColorSelectView.prototype._createLi = function(item) {
      var id, li;
      id = escapeHTML(item.id);
      li = document.createElement('li');
      li.insertAdjacentHTML('beforeend', "<input type=\"radio\" id=\"color" + id + "\" name=\"color\" value=\"" + id + "\">\n<label for=\"color" + id + "\">\n  <span class=\"color-box\"\n    style=\"background-color: " + (escapeHTML(item.rgb)) + ";\"></span>\n  " + (escapeHTML(item.name)) + "\n</label>");
      return li;
    };

    return ColorSelectView;

  })(SelectView);

  CartSelectView = (function(_super) {

    __extends(CartSelectView, _super);

    function CartSelectView() {
      return CartSelectView.__super__.constructor.apply(this, arguments);
    }

    CartSelectView.prototype._createLi = function(item) {
      var id, li, text;
      id = escapeHTML(item.id);
      text = escapeHTML("(" + item.amount + "x) " + item.color.name + " " + item.part.name);
      li = document.createElement('li');
      li.insertAdjacentHTML('beforeend', "<input type=\"radio\" id=\"cart" + id + "\" name=\"cart\" value=\"" + id + "\">\n<label for=\"cart" + id + "\">\n  <span class=\"color-box\"\n    style=\"background-color: " + (escapeHTML(item.color.rgb)) + ";\"></span>\n  " + text + "\n</label>");
      return li;
    };

    return CartSelectView;

  })(SelectView);

  PartImageView = (function(_super) {

    __extends(PartImageView, _super);

    function PartImageView(model, elem) {
      var img;
      this.elem = elem;
      PartImageView.__super__.constructor.apply(this, arguments);
      img = document.createElement('img');
      elem.appendChild(img);
      model.listen('select', function(item) {
        var colorId;
        colorId = item.colors[0].id;
        img.onerror = function() {
          this.src = "http://img.bricklink.com/P/" + colorId + "/" + item.id + ".jpg";
          return this.onerror = null;
        };
        return img.src = "http://img.bricklink.com/P/" + colorId + "/" + item.id + ".gif";
      });
    }

    return PartImageView;

  })(View);

  ResultView = (function(_super) {

    __extends(ResultView, _super);

    function ResultView(model, elem) {
      this.elem = elem;
      ResultView.__super__.constructor.apply(this, arguments);
      model.listen('reset', this.hide.bind(this));
      this.showing = false;
    }

    ResultView.prototype._td = function(text) {
      var td;
      td = document.createElement('td');
      td.appendChild(document.createTextNode(text));
      return td;
    };

    ResultView.prototype._createRow = function(item, store) {
      var price, text, tr, url, _ref;
      _ref = this.model.matrix.get(item, store), price = _ref.price, url = _ref.url;
      text = escapeHTML(item.color.name + ' ' + item.part.name);
      tr = document.createElement('tr');
      tr.insertAdjacentHTML('beforeend', "<td>\n  <span class=\"color-box\"\n    style=\"background-color: " + (escapeHTML(item.color.rgb)) + ";\"></span>\n  <a href=\"http://www.bricklink.com/catalogPG.asp?P=" + item.part.id + "&colorID=" + item.color.id + "\" target=\"_blank\">\n    " + text + "\n  </a>\n</td>\n<td>\n  <a href=\"http://www.bricklink.com" + (escapeHTML(url)) + "\" target=\"_blank\">\n    " + (escapeHTML(store.name)) + "\n  </a>\n</td>");
      tr.appendChild(this._td(price));
      tr.appendChild(this._td(item.amount));
      tr.appendChild(this._td((price * item.amount).toFixed(2)));
      return tr;
    };

    ResultView.prototype._createTable = function(solution) {
      var footer, frag, header, i, item, store, wholePrice, _i, _len;
      frag = document.createDocumentFragment();
      header = document.createElement('tr');
      header.innerHTML = '<th>部品</th><th>店名</th><th>単価（円）</th><th>個数</th><th>小計</th>';
      frag.appendChild(header);
      wholePrice = 0;
      for (i = _i = 0, _len = solution.length; _i < _len; i = ++_i) {
        store = solution[i];
        item = this.model.items[i];
        frag.appendChild(this._createRow(item, store));
        wholePrice += this.model.matrix.get(item, store).price * item.amount;
      }
      footer = document.createElement('tr');
      footer.innerHTML = "<td colspan='3'><td>合計</td><td><b>" + (wholePrice.toFixed(2)) + "</b></td>";
      frag.appendChild(footer);
      return frag;
    };

    ResultView.prototype.hide = function() {
      this.elem.className = '';
      return this.showing = false;
    };

    ResultView.prototype.render = function() {
      var solution, table, tbody, _i, _len, _ref;
      if (!this.model.result.length) {
        return;
      }
      this.elem.innerHTML = '';
      table = document.createElement('table');
      tbody = document.createElement('tbody');
      _ref = this.model.result.slice(0, 20);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        solution = _ref[_i];
        tbody.appendChild(this._createTable(solution));
      }
      table.appendChild(tbody);
      this.elem.appendChild(table);
      this.elem.className = 'displayed';
      return this.showing = true;
    };

    return ResultView;

  })(View);

  ProgressButton = (function(_super) {

    __extends(ProgressButton, _super);

    function ProgressButton(model, elem) {
      this.elem = elem;
      ProgressButton.__super__.constructor.apply(this, arguments);
      model.listen('start', this.start.bind(this));
      model.listen('error', this.error.bind(this));
      model.listen('reset', this.reset.bind(this));
      this.reset();
    }

    ProgressButton.prototype._setBackground = function(color) {
      return this.elem.style.backgroundColor = color;
    };

    ProgressButton.prototype.error = function() {
      this.elem.disabled = false;
      this.elem.value = 'エラー、あとでやり直してください';
      this.elem.className = 'button error';
      return setTimeout(this.reset.bind(this), 3000);
    };

    ProgressButton.prototype.start = function() {
      this.elem.disabled = true;
      return this.elem.value = 'データを集めています...';
    };

    ProgressButton.prototype.reset = function() {
      this.elem.disabled = false;
      this.elem.value = 'このパーツで店を探す';
      return this.elem.className = 'button';
    };

    ProgressButton.prototype.render = function() {
      this.elem.disabled = false;
      if (this.model.result.length) {
        this.elem.value = 'パーツを選びなおす';
        return this.elem.className = 'button';
      } else {
        this.elem.value = 'パーツを減らしてください';
        this.elem.className = 'button error';
        return setTimeout(this.reset.bind(this), 3000);
      }
    };

    return ProgressButton;

  })(View);

  (function() {
    var addItem, cart, cartSelect, categorySelect, colorSelect, editItem, partSelect, processor, removeItem, router, searcher;
    categorySelect = new SelectModel('category');
    partSelect = new SelectModel('part');
    colorSelect = new SelectModel('color');
    cartSelect = new SelectModel('cart');
    cart = new Assoc();
    processor = new DataProcessor();
    searcher = new Searcher();
    router = new Router(cartSelect);
    cart.listen(function(type, id) {
      switch (type) {
        case 'category':
          categorySelect.setItem(id);
          partSelect.reset(categorySelect.item.parts);
          return colorSelect.reset([]);
        case 'part':
          partSelect.setItem(id);
          return colorSelect.reset(partSelect.item.colors);
        case 'color':
          return colorSelect.setItem(id);
        case 'cart':
          return cartSelect.setItem(id);
      }
    });
    addItem = function() {
      var amount, color, part;
      part = partSelect.item;
      color = colorSelect.item;
      amount = cart.get('amount');
      if (part && color && amount) {
        return cartSelect.add({
          id: uuid(),
          part: part,
          color: color,
          amount: amount
        });
      }
    };
    removeItem = function() {
      return cartSelect.remove();
    };
    editItem = function() {
      var amount, color, item, part;
      item = removeItem();
      if (!item) {
        return;
      }
      part = item.part, color = item.color, amount = item.amount;
      cart.set('category', part.categoryId);
      cart.set('part', part.id);
      cart.set('color', color.id);
      return cart.set('amount', amount);
    };
    document.addEventListener('DOMContentLoaded', function() {
      var resultView;
      new SelectView(categorySelect, $('categorySelect'));
      new SelectView(partSelect, $('partSelect'));
      new PartImageView(partSelect, $('image'));
      new ColorSelectView(colorSelect, $('colorSelect'));
      new CartSelectView(cartSelect, $('cart'));
      new FormView(cart, $('form'));
      resultView = new ResultView(processor, $('result'));
      new ProgressButton(processor, $('calculateButton'));
      $('addButton').addEventListener('click', addItem, false);
      $('editButton').addEventListener('click', editItem, false);
      $('removeButton').addEventListener('click', removeItem, false);
      $('calculateButton').addEventListener('click', function() {
        if (resultView.showing) {
          return processor.reset();
        } else {
          return processor.process(cartSelect.options);
        }
      }, false);
      return $('searchBox').addEventListener('input', function() {
        return partSelect.reset(searcher.search(this.value));
      }, false);
    }, false);
    return new DataLoader().load(function(data) {
      categorySelect.reset(data.categories);
      searcher.setData(data.parts);
      return router.setData(data);
    });
  })();

}).call(this);
